{
  "UMLClass": {
      "assistant_role_name": "Senior Engineer",
      "user_role_name": "Chief Technology Officer",
      "phase_prompt": [
        "According to the Product Requirement Document (PRD) below:",
        "PRD: <PRD starts>",
        "\"{prd}\"",
        "<PRD ends>.",
        "As the {assistant_role}, your task is to draw a UML class mermaid diagram showcasing classes, interfaces, and their static structures and relationships. While developing this diagram, consider the following guidelines:",
        "1. Aim for a design that demonstrates a cohesive style and approach, with all components working harmoniously together.",
        "2. Keep the design suitably complex, reflecting the PRD's requirements. Balance the number of classes and methods per class, and be mindful of inheritance depth.",
        "3. Strive for clarity and focus within each class and aim for minimal dependencies between different classes.",
        "4. Ensure your design accurately and fully reflects the PRD, capturing all necessary functionalities and relationships.",
        "5. Create a design that is easy to read and understand, which will be helpful for programming, testing, and future maintenance. Consider the practical aspects of modularity and testing strategies.",
        "6. Remember that a well-thought-out design is the foundation for effective coding. They are interconnected but distinct processes.",
        "7. Write the markdown file to UML_class.md, adhering to the following format:",
        "   # UML class",
        "   `Global_functions` is a placeholder for global functions.",
        "   ```mermaid",
        "   classDiagram",
        "       ......",
        "   ```",
        "8. Treat functions not within a class as global functions, including them in a designated 'Global Functions' section. Detail functions with necessary parameters and data types, including output types if possible.",
        "9. Provide a comprehensive and detailed representation, rather than a brief overview.",
        "10. Seek a balance between accuracy, simplicity, readability, and implementability in your diagram. Consider encapsulating functions within existing classes to avoid unnecessary complexity."
    ]
  },
  "UMLSequenceFlow": {
      "assistant_role_name": "Senior Engineer",
      "user_role_name": "Chief Technology Officer",
      "phase_prompt": [
        "According to the Product Requirement Document (PRD) and the UML class diagram provided:",
        "PRD: <PRD starts>",
        "\"{prd}\"",
        "<PRD ends>.",
        "UML_class: <UML_class starts>",
        "\"{uml_class}\"",
        "<UML_class ends>.",
        "As the {assistant_role}, your task is to create a UML sequence diagram that illustrates the dynamic behavior and interactions between classes and interfaces. Consider the following guidelines when developing your diagram:",
        "1. Strive for a clear and integrated design that reflects a consistent style, with all components and interactions working smoothly together.",
        "2. Balance the interaction complexity. Consider the number of messages, the depth of nested calls, and the number of participating objects. Ensure that the complexity is aligned with the PRD.",
        "3. Focus on achieving high cohesion within sequences and low coupling between different system components. Each sequence should be focused and depict minimal dependencies.",
        "4. Ensure your diagram is an accurate and comprehensive reflection of the system's behavior as specified in the PRD and the structural design outlined in the UML class diagrams.",
        "5. Create a diagram that is easily interpretable for development, testing, and maintenance purposes. It should clearly represent the functionality of each class, document object creation instances, and demonstrate a modular and simple interface.",
        "6. Write the markdown file to UML_sequence.md, following the specified format:",
        "   # UML sequence",
        "   `Global_functions` is a placeholder for global functions.",
        "   ```mermaid",
        "   sequenceDiagram",
        "       ......",
        "   ```",
        "7. Include functions not within a class as global functions. Functions in the sequence diagram do not need to detail parameters.",
        "8. Provide a detailed and complete file, rather than a brief overview.",
        "9. Seek a balance in the UML Sequence diagram between accuracy, simplicity, readability, and implementability. If possible, encapsulate sequences within existing classes to reduce complexity."
    ]
  },
  "ArchitectureDesign": {
      "assistant_role_name": "Senior Engineer",
      "user_role_name": "Chief Technology Officer",
      "phase_prompt": [
        "According to the Product Requirement Document (PRD) and the UML class diagram provided:",
        "PRD: <PRD starts>",
        "\"{prd}\"",
        "<PRD ends>.",
        "UML_class: <UML_class starts>",
        "\"{uml_class}\"",
        "<UML_class ends>.",
        "As the {assistant_role}, your task is to create an architecture design for the project that reflects the following guidelines:",
        "1. Ensure the architecture design demonstrates a cohesive style and approach, with all components logically organized and integrated.",
        "2. Focus on creating a practical and efficient architecture. This includes a logical file tree structure, clear class locations, and a modular design for ease of construction, testing, and maintenance.",
        "3. Your design should accurately reflect the requirements and structural design outlined in the PRD and UML class diagrams, ensuring consistency in the development process.",
        "4. Adhere to community and industry standards in your architecture design, particularly in file tree structure and coding practices. This includes following widely accepted conventions and best practices for the programming language used.",
        "5. Write the markdown file to architecture_design.md, starting with:",
        "   # Architecture Design",
        "   Below is a text-based representation of the file tree.",
        "   ```[file tree]```",
        "   Use '├──', '│', '└──' to clearly depict the tree structure.",
        "6. Include essential components such as '.gitignore', 'examples' (directory of usage examples), all class files, and 'outputs' (directory for output generation and storage). Omit 'docs' if not required.",
        "7. Assign subsections for key elements like Outputs, Examples, and individual classes or code files. Include explanations for each, specifying formats for output files, purpose and results of examples, and the role of each method and their parameters in classes.",
        "8. Provide a detailed and complete representation of the architecture, rather than a brief overview.",
        "9. Balance accuracy, simplicity, readability, and implementability in your architecture design. Avoid unnecessary complexity while ensuring all necessary details are included."
    ]    
  }
}